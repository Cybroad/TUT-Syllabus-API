name: Fetch Latest Lecture Data and Create Pull Request

on:
  # schedule:
  #   # JST 15:40 (UTC 6:40) every 3rd day of the month (best practice: https://zenn.dev/rie_amasato/articles/f901ef9fb19415)
  #   - cron: "40 6 1 */3 *"
  push:
    branches:
      - features/changed-to-upload-lecture-data-directly
  workflow_dispatch:

permissions:
  actions: write
  checks: write
  contents: write
  pull-requests: write

jobs:
  fetch_lecture_codes:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"
          cache: "pip"
      - run: pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install --upgrade get-chrome-driver
          pip install -r requirements.txt

      - name: Generate lecture codes
        run: python generate.py --type=lecture_codes

      - name: Upload lecture codes
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          include-hidden-files: true
          name: lecture_codes
          path: output/lecture_codes.json

  fetch_lecture_data:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    needs: fetch_lecture_codes

    # strategy:
    #   matrix:
    #     type: [BT, CS, MS, ES, ESE5, ESE6, ESE7, X1, DS, HS, HSH1, HSH2, HSH5, HSH6, X3, GF, GH]
    strategy:
       matrix:
         type: [BT, CS]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"
          cache: "pip"
      - run: pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install --upgrade get-chrome-driver
          pip install -r requirements.txt

      - name: Clean up
        run: |
          rm -rf output && mkdir output
          rm -rf docs/api/v1 && mkdir -p docs/api/v1

      - name: Download lecture codes
        uses: actions/download-artifact@v4
        with:
          name: lecture_codes
          path: output

      - name: Generate lecture data
        run: python generate.py --type=lecture_data --department=${{ matrix.type }}

      - name: Upload lecture data
        uses: actions/upload-artifact@v4
        with:
          name: lecture_data_${{ matrix.type }}
          path: output/${{ matrix.type }}

  
  upload_lecture_data:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    needs: fetch_lecture_data

    steps:
      - uses: actions/checkout@v4

      - name: Prepare directories
        run: |
          mkdir -p docs/api/v1
          mkdir -p docs/api/v1/all

      - name: Download lecture data
        uses: actions/download-artifact@v4
        with:
          pattern: lecture_data_*
          merge-multiple: true
    
      - name: Debug
        run: |
          ls
          ls -l docs/api/v1
          ls -l docs/api/v1/all

      - name: Copy lecture data (all)
        run: |
          for dir in lecture_data_*; do
            dir=${dir%/}
            unzip "$dir" -d docs/api/v1/all
          done
      
      - name: Copy lecture data to each department
        run: |
          for dir in lecture_data_*; do
            dir=${dir%/}
            dirName=$(echo $dir | cut -d'_' -f3)
            mkdir -p docs/api/v1/$dirName
            cp -r "$dir" docs/api/v1/$dirName
          done
  
      - name: Upload to CloudFlare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy docs --project-name=tut-syllabus-api --commit-dirty=true
