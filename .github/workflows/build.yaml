name: Fetch Latest Lecture Data and Create Pull Request

on:
  # schedule:
  #   # JST 15:40 (UTC 6:40) every 3rd day of the month (best practice: https://zenn.dev/rie_amasato/articles/f901ef9fb19415)
  #   - cron: "40 6 1 */3 *"
  push:
    branches:
      - features/changed-to-upload-lecture-data-directly
  workflow_dispatch:

permissions:
  actions: write
  checks: write
  contents: write
  pull-requests: write

jobs:
  fetch_lecture_codes:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"
          cache: "pip"
      - run: pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install --upgrade get-chrome-driver
          pip install -r requirements.txt

      - name: Generate lecture codes
        run: python generate.py --type=lecture_codes

      - name: Upload lecture codes
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          include-hidden-files: true
          name: lecture_codes
          path: output/lecture_codes.json

  fetch_lecture_data:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    needs: fetch_lecture_codes

    strategy:
      matrix:
        type: [BT, CS, MS, ES, ESE5, ESE6, ESE7, X1, DS, HS, HSH1, HSH2, HSH5, HSH6, X3, GF, GH]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"
          cache: "pip"
      - run: pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install --upgrade get-chrome-driver
          pip install -r requirements.txt

      - name: Clean up
        run: |
          rm -rf output && mkdir output
          rm -rf docs/api/v1 && mkdir -p docs/api/v1

      - name: Download lecture codes
        uses: actions/download-artifact@v4
        with:
          name: lecture_codes
          path: output

      - name: Generate lecture data
        run: python generate.py --type=lecture_data --department=${{ matrix.type }}

      - name: Zip lecture data
        run: |
          if [ -d output/${{ matrix.type }} ]; then
            cd output && zip -r ${{ matrix.type }}.zip ${{ matrix.type }}
          fi

      - name: Upload lecture data
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: lecture_data_${{ matrix.type }}
          path: output/${{ matrix.type }}.zip

  
  upload_lecture_data:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    needs: fetch_lecture_data

    steps:
      - uses: actions/checkout@v4

      - name: Prepare directories
        run: |
          mkdir -p docs/api/v1
          mkdir -p docs/api/v1/all

      - name: Download lecture data
        uses: actions/download-artifact@v4
        with:
          pattern: lecture_data_*
          merge-multiple: true
      
      - name: Unzip lecture data (all)
        run: |
          for file in "BT CS MS ES ESE5 ESE6 ESE7 X1 DS HS HSH1 HSH2 HSH5 HSH6 X3 GF GH"; do
            unzip -o lecture_data_$file.zip -d docs/api/v1/all
            if [ -z "$(ls -A docs/api/v1/all/$file)" ]; then
              mv docs/api/v1/all/$file/* docs/api/v1/all
              rm -rf docs/api/v1/all/$file
            fi
          done

      - name: Unzip lecture data (each)
        run: |
          for file in "BT CS MS ES ESE5 ESE6 ESE7 X1 DS HS HSH1 HSH2 HSH5 HSH6 X3 GF GH"; do
            unzip -o lecture_data_$file.zip -d docs/api/v1/$file
          done
        
      - name: Remove zip files
        run: rm -f *.zip

      - name: Upload to CloudFlare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy docs --project-name=tut-syllabus-api --commit-dirty=true
